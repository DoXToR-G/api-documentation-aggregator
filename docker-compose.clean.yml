services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: api_docs_db
      POSTGRES_USER: api_user
      POSTGRES_PASSWORD: password  
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U api_user -d api_docs_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-docs-network

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - api-docs-network

  # Elasticsearch for intelligent search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - api-docs-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.minimal
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://api_user:password@postgres:5432/api_docs_db
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=api_docs
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
      - SECRET_KEY=dev-secret-key-for-local-testing
      - LOG_LEVEL=INFO
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - api-docs-network

  # Static Frontend with Nginx
  frontend:
    image: nginx:alpine
    ports:
      - "3000:80"
    volumes:
      - ./frontend-simple:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    networks:
      - api-docs-network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:

networks:
  api-docs-network:
    driver: bridge 